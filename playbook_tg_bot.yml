---
- name: Ensure Python 3 and pip are installed
  hosts: db_master
  become: yes
  tasks:
    - name: Install Python 3
      apt:
        name: python3
        state: present

    - name: Install pip for Python 3
      apt:
        name: python3-pip
        state: present

    - name: Install psycopg2 using apt
      apt:
        name: python3-psycopg2
        state: present

- name: Configure PostgreSQL master for replication
  hosts: db_master
  become: yes
  tasks:
    - name: Install PostgreSQL
      apt:
        name: postgresql-15
        state: latest

    - name: Change password for a PostgreSQL user
      become: yes
      become_user: postgres
      postgresql_user:
        db: postgres
        name: postgres
        password: postgres
        state: present
      no_log: true

      
    - name: Copy pg_hba configuration for replication
      copy:
        src: ./pg_hba.conf
        dest: /etc/postgresql/15/main/pg_hba.conf
      notify: restart postgresql

    - name: Update postgresql configuration for replication
      blockinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        block: |
          # BEGIN REPLICATION BLOCK
          listen_addresses = '*'
          archive_mode = on               
          archive_command = 'cp %p /oracle/pg_data/archive/%f'
          wal_level=replica 
          hot_standby=on 
          max_wal_senders=10 
          max_replication_slots=10 
          hot_standby_feedback=on
          log_replication_commands=on
          # END REPLICATION BLOCK
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        create: yes
      notify: restart postgresql

    - name: Create replication user
      become: yes
      become_user: postgres
      postgresql_user:
        db: postgres
        name: repl_user
        password: kali
        role_attr_flags: REPLICATION
        state: present
      notify: restart postgresql  

  handlers:
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted

- name: Setup PostgreSQL database and tables
  hosts: db_master
  become: yes
  tasks:
    - name: Ensure PostgreSQL is installed
      apt:
        name: postgresql
        state: present

    - name: Create database 'my_database'
      postgresql_db:
        name: my_database
        state: present
        owner: postgres
        encoding: 'UTF8'
        lc_collate: 'en_US.UTF-8'
        lc_ctype: 'en_US.UTF-8'
      become_user: postgres

    - name: Create table 'email_addresses'
      postgresql_query:
        db: my_database
        query: |
          CREATE TABLE IF NOT EXISTS email_addresses (
            id SERIAL PRIMARY KEY,
            email VARCHAR(255) NOT NULL
          );
      become_user: postgres

    - name: Insert data into 'email_addresses'
      postgresql_query:
        db: my_database
        query: |
          INSERT INTO email_addresses (email) VALUES ('mid-or-feed-not-funny@iam3pos.com');
      become_user: postgres

    - name: Create table 'phone_numbers'
      postgresql_query:
        db: my_database
        query: |
          CREATE TABLE IF NOT EXISTS phone_numbers (
            id SERIAL PRIMARY KEY,
            phone_number VARCHAR(15) NOT NULL
          );
      become_user: postgres

    - name: Insert data into 'phone_numbers'
      postgresql_query:
        db: my_database
        query: |
          INSERT INTO phone_numbers (phone_number) VALUES ('+78005553535');
      become_user: postgres

- name: Add a dynamically defined user to the postgres group
  hosts: db_master
  become: yes
  vars_prompt:
    - name: username
      prompt: "Введите имя пользователя, которое вы хотите добавить в группу adm"
      private: no
  tasks:
    - name: Add user to postgres group
      user:
        name: "{{ username }}"
        groups: postgres
        append: yes

- name: Configure PostgreSQL slave for replication
  hosts: db_slave
  become: yes
  tasks:
    - name: Install PostgreSQL
      apt:
        name: postgresql-15
        state: latest

    - name: Update postgresql configuration for replication
      blockinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        block: |
          # BEGIN REPLICATION BLOCK
          listen_addresses = '*'
          # END REPLICATION BLOCK
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        create: yes
      notify: restart postgresql

    - name: Ensure PostgreSQL is stopped on slave
      become: yes
      systemd:
        name: postgresql
        state: stopped

    - name: Clean data directory on slave
      become: yes
      become_user: postgres
      shell: rm -rf /var/lib/postgresql/15/main/*
      args:
        executable: /bin/bash

    - name: List contents of the directory to ensure it is empty
      become: yes
      become_user: postgres
      command: ls -la /var/lib/postgresql/15/main/
      register: ls_output

    - name: Debug output of directory contents
      debug:
        msg: "{{ ls_output.stdout_lines }}"

    - name: Run pg_basebackup to initialize the slave
      become: yes
      become_user: postgres
      command: pg_basebackup -R -h {{ hostvars['db_master']['ansible_host'] }} -D /var/lib/postgresql/15/main/ -U repl_user -P 
      environment:
        PGPASSWORD: "kali"

    - name: Start PostgreSQL on slave
      become: yes
      systemd:
        name: postgresql
        state: started
  handlers:
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted

- name: Deploy Telegram bot
  hosts: bot_servers
  become: yes
  tasks:
    - name: Ensure Python3 and pip are installed
      apt:
        pkg:
        - python3
        - python3-pip
        state: present
    - name: Clone the bot repository into a more accessible directory
      become: yes
      become_user: '{{ ansible_user }}'
      git:
        repo: 'https://github.com/ikariya-san/test.git'
        dest: "/home/{{ ansible_user }}/test"  # Используем домашнюю директорию текущего пользователя
        version: main
      become: yes  # Используйте это, только если необходимо

    - name: Install Python dependencies
      become: yes
      become_user: '{{ ansible_user }}'
      pip:
        requirements: "/home/{{ ansible_user }}/test/requirements.txt"
        executable: pip3
      become: no  # Это также должно выполняться без sudo, если это не требуется для установки пакетов
