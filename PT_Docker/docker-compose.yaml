version: '3.8'

services:
  bot:
    image: bot_image
    env_file:
      - .env
    environment:
      RM_HOST: ${RM_HOST}
      RM_USER: ${RM_USER}
      RM_PASS: ${RM_PASSWORD}
      RM_PORT: ${RM_PORT}
      TOKEN: ${TOKEN}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
    depends_on:
      - db
    ports:
      - "8000:8000"

  db:
    image: db_image
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_HOST_AUTH_METHOD: "md5\nhost replication ${DB_REPL_USER} 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    command: |
     postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      -c log_replication_commands=on
    volumes:
    - db_data:/var/lib/postgresql/data
    ports:
    - "${DB_PORT}"

  db_repl:
    image: db_repl_image
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    command: |
      bash -c '
      rm -rf /var/lib/postgresql/data/*
      export PGPASSWORD=${DB_REPL_PASSWORD} &&
      until pg_basebackup -D /var/lib/postgresql/data -R --slot=replication_slot -h ${DB_HOST} -p ${DB_PORT} -U ${DB_REPL_USER} -W --verbose
      do
      echo "Waiting for primary to connect..."
      sleep 5s
      done
      echo "Backup done, starting replica..."
      chown -R postgres:postgres /var/lib/postgresql/data
      chmod 700 /var/lib/postgresql/data
      su postgres -c "exec /usr/lib/postgresql/13/bin/postgres -D /var/lib/postgresql/data"
      '
    depends_on:
      - db
    volumes:
      - db_repl_data:/var/lib/postgresql/data
    ports:
      - "${DB_REPL_PORT}"
volumes:
  db_data:
  db_repl_data:
